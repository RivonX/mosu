<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <packaging>pom</packaging>

    <!-- 项目基本信息 -->
    <groupId>io.github.rivon</groupId>
    <artifactId>mosu</artifactId>
    <version>1.0.0</version>
    <name>Mosu</name>
    <description>Mosu是一个SpringBoot常用集成框架。</description>
    <url>https://github.com/RivonX/mosu</url>

    <modules>
        <module>mosu-all</module>
        <module>mosu-bom</module>
        <module>mosu-oss</module>
        <module>mosu-notify</module>
<!--        <module>nsboot-cache</module>-->
        <module>mosu-mq</module>
<!--        <module>nsboot-logistics</module>-->
<!--        <module>nsboot-usps</module>-->
    </modules>

    <properties>
        <project.build.sourceEncoding>utf-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>utf-8</project.reporting.outputEncoding>

        <Automatic-Module-Name>io.github.rivon.mosu</Automatic-Module-Name>

        <compile.version>17</compile.version>
    </properties>

    <!-- 依赖管理：集中管理依赖版本 -->
    <dependencyManagement>
        <dependencies>
            <!-- 引入 Spring Boot 的依赖管理 BOM，集中管理 Spring Boot 相关依赖的版本 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>3.5.6</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>

        <!-- Spring Boot 配置处理器依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
        </dependency>

        <!-- Lombok，用于简化 Java 代码 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- Spring Boot 测试依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <issueManagement>
        <system>Github Issue</system>
        <url>https://github.com/RivonX/mosu/issues</url>
    </issueManagement>

    <licenses>
        <license>
            <name>Apache-2.0 license</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0</url>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>Rivon</name>
            <email>Rivon@gmail.com</email>
        </developer>
    </developers>

    <scm>
        <connection>scm:git@github.com:RivonX/mosu.git</connection>
        <developerConnection>scm:git@github.com:RivonX/mosu.git</developerConnection>
        <url>git@github.com:RivonX/mosu.git</url>
    </scm>

    <build>
        <plugins>
            <!-- 编译插件，包含 Lombok 的注解处理器 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <!-- 配置编译时使用的 Java 源代码版本 -->
                    <source>${compile.version}</source> <!-- 使用变量 ${compile.version} 来指定编译时的源代码版本 -->

                    <!-- 配置编译时生成的字节码版本 -->
                    <target>${compile.version}</target> <!-- 使用变量 ${compile.version} 来指定编译时生成的字节码版本 -->

                    <!-- 配置额外的编译器参数 -->
                    <compilerArgument>-Xlint:unchecked</compilerArgument> <!-- 添加编译时的警告选项，用于检查未检查的类型转换 -->
                </configuration>
            </plugin>

            <!-- 构建 JAR 文件的插件配置 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId> <!-- 插件的 groupId -->
                <artifactId>maven-jar-plugin</artifactId> <!-- 插件的 artifactId -->
                <version>3.3.0</version> <!-- 插件的版本 -->

                <configuration>
                    <archive>
                        <!-- 是否在 JAR 文件中生成索引文件，默认为 false，设置为 true 表示生成索引 -->
                        <index>true</index>

                        <manifest>
                            <!-- 配置 JAR 文件的 manifest 文件 -->

                            <!-- 是否自动在 manifest 文件中添加默认的实现条目，如版本号等 -->
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                        </manifest>

                        <manifestEntries>
                            <!-- 在 JAR 文件的 manifest 文件中添加自定义条目 -->

                            <!-- 添加构建操作系统的信息，`${os.name}` 会被替换为当前操作系统的名称 -->
                            <Build-OS>${os.name}</Build-OS>

                            <!-- 添加构建者的用户名，`${user.name}` 会被替换为当前操作系统的用户名 -->
                            <Built-By>${user.name}</Built-By>

                            <!-- 添加构建时使用的 JDK 版本，`${java.version}` 会被替换为当前 JDK 版本 -->
                            <Build-Jdk>${java.version}</Build-Jdk>

                            <!-- 添加构建时间戳，`${maven.build.timestamp}` 会被替换为构建的时间戳 -->
                            <Build-Timestamp>${maven.build.timestamp}</Build-Timestamp>

                            <!-- 为 Java 模块化项目指定自动模块名称，`${Automatic-Module-Name}` 可以是一个自定义的模块名称 -->
                            <Automatic-Module-Name>${Automatic-Module-Name}</Automatic-Module-Name>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>release</id>
            <distributionManagement>
                <snapshotRepository>
                    <id>central</id>
                    <url>https://central.sonatype.com/</url>
                </snapshotRepository>
                <repository>
                    <id>central</id>
                    <url>https://central.sonatype.com/</url>
                </repository>
            </distributionManagement>
            <build>
                <plugins>
                    <!-- central发布插件 -->
                    <plugin>
                        <groupId>org.sonatype.central</groupId>
                        <artifactId>central-publishing-maven-plugin</artifactId>
                        <version>0.4.0</version>
                        <extensions>true</extensions>
                        <configuration>
                            <publishingServerId>central</publishingServerId>
                            <tokenAuth>true</tokenAuth>
                        </configuration>
                    </plugin>

                    <!-- source 源码插件 -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <version>2.2.1</version>
                        <executions>
                            <execution>
                                <id>attach-sources</id>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- javadoc 插件 -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>2.9.1</version>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- gpg 插件 -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>3.0.1</version>
                        <configuration>
                            <executable>gpg</executable>
                            <keyname>allen</keyname>
                            <gpgArguments>
                                <arg>--pinentry-mode</arg>
                                <arg>loopback</arg>
                            </gpgArguments>
                        </configuration>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
